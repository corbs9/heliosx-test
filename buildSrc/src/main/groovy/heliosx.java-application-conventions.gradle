plugins {
    id 'java'
    id 'com.diffplug.spotless'
    id 'org.gradlex.extra-java-module-info'
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
}

repositories {
    mavenLocal()
    mavenCentral()
}


dependencies {
    // Implementation Dependencies
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'
    implementation 'com.alibaba.fastjson2:fastjson2:2.0.53'
    // Test Dependencies
    testImplementation "org.apache.commons:commons-text:${commonsTextVersion}"
    testImplementation 'org.springframework:spring-test:6.2.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.11.3'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // Open Api Dependencies
    annotationProcessor("io.javalin.community.openapi:openapi-annotation-processor:6.3.0")
    implementation 'io.javalin.community.openapi:javalin-openapi-plugin:6.3.0'
    implementation 'io.javalin.community.openapi:javalin-swagger-plugin:6.3.0'
}

sourceSets {
    integration {
        java.srcDir "$projectDir/src/integration/java"
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }

    functional {
        java.srcDir "$projectDir/src/functional/java"
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output

    }
}

configurations {
    integrationImplementation.extendsFrom testImplementation
    functionalImplementation.extendsFrom testImplementation
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath
}

task functionalTest(type: Test) {
    testClassesDirs = sourceSets.functional.output.classesDirs
    classpath = sourceSets.functional.runtimeClasspath
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

// Ensure non modules are added as automatic modules
extraJavaModuleInfo {
    deriveAutomaticModuleNamesFromFileNames = true

}

spotless {
    java {
        palantirJavaFormat()
        importOrder()
        removeUnusedImports()
    }
}

java.sourceCompatibility = JavaVersion.VERSION_21
java.targetCompatibility = JavaVersion.VERSION_21

compileJava {
    dependsOn spotlessApply
}
